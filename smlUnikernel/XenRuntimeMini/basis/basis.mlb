(* Initial allows for other modules to be discharged at link time *)

local
    InitialMini.sml
    basis General =
      bas
        GENERAL.sig General.sml OPTION.sig Option.sml
      end

    basis List =
      let open General
      in bas
            LIST.sig List.sml LIST_PAIR.sml ListPair.sml
         end
      end

    basis ArrayVector =
        let open General List
            basis Poly =
              let polytable.sml TableSlice.sml
              in bas
                    VECTOR.sig Vector.sml
                    VECTOR_SLICE.sml VectorSlice.sml
                    ARRAY.sig Array.sml
                    ARRAY_SLICE.sml ArraySlice.sml
                    ARRAY2.sig Array2.sml
                 end
              end
        in bas
              open Poly
              MONO_VECTOR.sml MONO_ARRAY.sml ByteTable.sml
              MONO_VECTOR_SLICE.sml MONO_ARRAY_SLICE.sml ByteSlice.sml
              MONO_ARRAY2.sml
           end
        end

    basis String =
       let open General ArrayVector
       in bas
             STRING_CVT.sml StringCvt.sml
             local open List
                   STR_BASE.sml StrBase.sml
             in
                Char.sml String.sml CHAR.sig STRING.sig SUBSTRING.sig Substring.sml
             end
          end
       end

    basis Text =
       let open String ArrayVector
       in bas TEXT.sig Text.sml end
       end

    basis Bool =
       let open General String
       in bas BOOL.sig Bool.sml end
       end

    basis IntInfRep =
       let open General List
       in bas INT_INF_REP.sml IntInfRep.sml end
       end

    basis Word =
       let open General String IntInfRep
           basis W = bas WORD.sig Word.sml Word64.sml Word63.sml Word32.sml Word31.sml Word8.sml
                         ann safeLinkTimeElimination
                         in local WordN.sml
                            in Word16.sml
                            end
                         end
                     end
           basis PW = let open ArrayVector W
                      in bas PACK_WORD.sml Pack32Little.sml Pack32Big.sml end
                      end
       in bas open W PW end
       end

    basis Byte =
       let open General String ArrayVector Word
       in bas BYTE.sig Byte.sml end
       end

    basis Int =
       let open General String IntInfRep
       in bas INTEGER.sml Int.sml Int32.sml Int31.sml Int63.sml Int64.sml
              ann safeLinkTimeElimination
              in local open Word
                       IntN.sml
		 in Ints.sml
		 end
              end
          end
       end

    basis IEEEReal =
       let open General String Int List
       in bas IEEE_REAL.sig IEEEReal.sml end
       end

    basis IntInf =
       let open General List ArrayVector String Word Int
       in bas ann safeLinkTimeElimination
              in INT_INF.sml IntInf.sml
              end
          end
       end

    basis WordArrayVector =
       let open General List ArrayVector Word Int
           wordtable-functors.sml
       in bas ann inline_functors
              in wordtables.sml
                 inttables.sml
              end
          end
       end

    basis Real =
       let open General String Int
       in bas
            MATH.sig Math.sml
            local open IEEEReal IntInf in REAL.sig Real.sml end
            local open Byte ArrayVector
            in PACK_REAL.sml PackRealLittle.sml PackRealBig.sml
            end
            open IEEEReal
          end
       end

    basis Io =
       let open General String List
       in bas IO.sml end
       end

    basis System =
       let open General String Int
       in let (*basis Time = let open Int Real IntInf in bas TIME.sig Time.sml end end *)
              basis Path = let open List in bas OS_PATH.sml Path.sml end end
              basis CommandLine = bas COMMAND_LINE.sml CommandLine.sml end
              (* basis Date = let open Int Real Time IntInf in bas DATE.sig Date.sml end end *)
              (* basis Timer = let open Int Time IntInf in bas TIMER.sig Timer.sml end end *)
          in bas open Path CommandLine
             end
          end
       end

in
  open General List ArrayVector String Bool Word Byte
       Int Real IntInf IntInfRep Io System Text
       WordArrayVector
end
